#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализировать компоновщик настроек.
// 
// Параметры:
//  ТипДанных - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор метаданных
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы
//  Настройки - НастройкиКомпоновкиДанных, Неопределено - Настройки компоновщика данных
Процедура ИнициализироватьКомпоновщикНастроек(ТипДанных, КомпоновщикНастроек,
			ИдентификаторФормы = Неопределено, Настройки = Неопределено) Экспорт

	СКД = СхемаКомпоновкиДанных(ТипДанных);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, ИдентификаторФормы);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
			
	Если Настройки = Неопределено Тогда
		Настройки = СКД.НастройкиПоУмолчанию;	
	КонецЕсли;

	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);	

КонецПроцедуры

// Получить события объекта1 С.
// 
// Параметры:
//  Объект1С - ДокументСсылка - Проверяемый документ
// 
// Возвращаемое значение:
//  Массив из Структура - Получить события объекта1 С
Функция ПолучитьСобытияОбъекта1С(Объект1С) Экспорт
	
	МассивПолучателей = Новый Массив;
	
	ТипОбъекта1С = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект1С));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОбъекта1С", ТипОбъекта1С);
	Запрос.Текст = "ВЫБРАТЬ
	               |	тг_События.Ссылка КАК Ссылка,
	               |	тг_События.Бот КАК Бот,
	               |	тг_События.Чат КАК Получатель,
	               |	тг_События.НастройкиОтбора КАК НастройкиОтбора,
	               |	тг_События.ФорматированныйТекст КАК ФорматированныйТекст
	               |ИЗ
	               |	Справочник.тг_События КАК тг_События
	               |ГДЕ
	               |	тг_События.ТипОбъекта1С = &ТипОбъекта1С";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыСообщения = Новый Структура;
		ФорматированныйТекст = Выборка.ФорматированныйТекст.Получить();
		
		ТекстСообщения = ПолучитьТекст(ФорматированныйТекст, ТипОбъекта1С, Объект1С, ПараметрыСообщения);
		стр = Новый Структура;
		стр.Вставить("Бот"				, Выборка.Бот);
		стр.Вставить("Получатель"		, Выборка.Получатель);
		стр.Вставить("Текст"			, ТекстСообщения);
		стр.Вставить("Параметры"		, ПараметрыСообщения);
		стр.Вставить("УсловиеВыполнено"	, УсловиеВыполнено(Объект1С, ТипОбъекта1С, Выборка.НастройкиОтбора));
		
		МассивПолучателей.Добавить(стр);
		
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УсловиеВыполнено(Ссылка, ТипОбъекта1С, НастройкиОтбора)
	
	Настройки = НастройкиОтбора.Получить();	
	Если Настройки = Неопределено Тогда
    	Возврат Истина;
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ПолеСсылка = Новый ПолеКомпоновкиДанных("Ссылка");
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТипОбъекта1С);
		
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(ТипОбъекта1С, КомпоновщикНастроек, Настройки);
		
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ПравоеЗначение 	= ПолеСсылка;
	ЭлементОтбора.ЛевоеЗначение 	= Ссылка;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, ПолеСсылка);
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ТипГенератораСКД = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , ТипГенератораСКД);
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
 
	Возврат ЗначениеЗаполнено(ТЗ);
	
КонецФункции

Функция СхемаКомпоновкиДанных(ТипДанных)

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса(ТипДанных);
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

// Текст запроса.
// 
// Параметры:
//  ТипДанных - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Null, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный - Тип данных
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция ТекстЗапроса(ТипДанных)
	
	Если НЕ ЗначениеЗаполнено(ТипДанных) Тогда
		Возврат "ВЫБРАТЬ ЛОЖЬ";
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
	
	ОператорЗапроса = ЗапросСхемы.Операторы[0];
	Таблица = ОператорЗапроса.Источники.Добавить(ТипДанных.ПолноеИмя, "Т");
	Для каждого ДоступноеПоле Из Таблица.Источник.ДоступныеПоля Цикл
		ОператорЗапроса.ВыбираемыеПоля.Добавить(ДоступноеПоле);	
	КонецЦикла;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция ПолучитьТекст(ШаблонТекста, ТипОбъекта1С, Объект1С, ПараметрыСообщения)
	
	Если ТипЗнч(ШаблонТекста) <> Тип("ФорматированныйДокумент") Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстШаблона = ШаблонТекста.ПолучитьТекст();

	ПараметрыТекстаСообщения = ОпределитьПараметрыТекстаСообщения(ТекстШаблона);
	ЗаполнитьРеквизитыПоПредмету(ПараметрыТекстаСообщения[ТипОбъекта1С.Синоним], Объект1С);
	
	СтрокиТекста 	= ШаблонТекста.ПолучитьЭлементы();
	ЦветКодовый 	= тг_СерверПовтИсп.ЦветКодовый();
	
	Смещение = 0;
	
	Для каждого СтрокаТекста Из СтрокиТекста Цикл
		
		ПозицияНачала 	= ШаблонТекста.ПолучитьПозициюПоЗакладке(СтрокаТекста.ЗакладкаНачала);
        ПозицияНачала 	= ПозицияНачала + Смещение;
		
		Шрифт 	= СтрокаТекста.Шрифт;
		Цвет 	= СтрокаТекста.ЦветТекста;
		
		Текст = ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(СтрокаТекста.Текст, ПараметрыТекстаСообщения);

		ДлинаТекста 	= СтрДлина(Текст);
			
		Если Шрифт.Полужирный = Истина Тогда
			тг_Сервер.ДобавитьОформление(ПараметрыСообщения, "bold"			, ПозицияНачала, ДлинаТекста);	
		КонецЕсли;
		
		Если Шрифт.Наклонный = Истина Тогда
			тг_Сервер.ДобавитьОформление(ПараметрыСообщения, "italic"			, ПозицияНачала, ДлинаТекста);	
		КонецЕсли;
		
		Если Шрифт.Подчеркивание = Истина Тогда
			тг_Сервер.ДобавитьОформление(ПараметрыСообщения, "underline"		, ПозицияНачала, ДлинаТекста);	
		КонецЕсли;

		Если Шрифт.Зачеркивание = Истина Тогда
			тг_Сервер.ДобавитьОформление(ПараметрыСообщения, "strikethrough"	, ПозицияНачала, ДлинаТекста);	
		КонецЕсли;

		Если Цвет = ЦветКодовый Тогда
			тг_Сервер.ДобавитьОформление(ПараметрыСообщения, "pre"				, ПозицияНачала, ДлинаТекста);	
		КонецЕсли;
		
		Смещение = Смещение + ДлинаТекста - СтрДлина(СтрокаТекста.Текст);

	КонецЦикла;

	Возврат ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(ТекстШаблона, ПараметрыТекстаСообщения);

КонецФункции

Функция ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(Знач ШаблонСтроки,
				ВставляемыеЗначения, Знач Префикс = "") Экспорт
	
	Результат = ШаблонСтроки;
	Для каждого СписокРеквизитов Из ВставляемыеЗначения Цикл
		Если ТипЗнч(СписокРеквизитов.Значение) = Тип("Соответствие") Тогда
			Результат = ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(Результат, СписокРеквизитов.Значение, 
							Префикс + СписокРеквизитов.Ключ + ".");
		Иначе
			Результат = СтрЗаменить(Результат, "[" + Префикс + СписокРеквизитов.Ключ + "]", СписокРеквизитов.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьПараметрыТекстаСообщения(ТекстСообщения)
	
	МассивПараметров = Новый Соответствие;
	
	ДлинаСообщения = СтрДлина(ТекстСообщения);
	
	Текст = ТекстСообщения;
	Позиция = СтрНайти(Текст, "[");
	Пока Позиция > 0 Цикл
		
		Если Позиция + 1 > ДлинаСообщения Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияОкончание = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, Позиция + 1);
		Если ПозицияОкончание > 0 Тогда
			НайденныйПараметр = Сред(Текст, Позиция + 1, ПозицияОкончание - Позиция - 1);
			МассивПараметров.Вставить(НайденныйПараметр, "");
		Иначе
			ПозицияОкончание = Позиция + 1;
		КонецЕсли;
		
		Если ПозицияОкончание > ДлинаСообщения Тогда
			Прервать;
		КонецЕсли;
		
		Позиция = СтрНайти(Текст, "[", НаправлениеПоиска.СНачала, ПозицияОкончание);
	
	КонецЦикла;
	
	СоответствиеПараметров = Новый Соответствие;
	Для каждого ЭлементаМассиваПараметров Из МассивПараметров Цикл
		ПозицияФормат = СтрНайти(ЭлементаМассиваПараметров.Ключ, "{");
		Если ПозицияФормат > 0 Тогда
			ИмяПараметра  = Лев(ЭлементаМассиваПараметров.Ключ, ПозицияФормат - 1);
			СтрокаФормата = Сред(ЭлементаМассиваПараметров.Ключ, ПозицияФормат );
		Иначе
			ИмяПараметра  = ЭлементаМассиваПараметров.Ключ;
			СтрокаФормата = "";
		КонецЕсли;
		МассивРазобранныйПараметр = СтрРазделить(ИмяПараметра, ".", Ложь);
		кДва = 2;
		Если МассивРазобранныйПараметр.Количество() < кДва Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЭлементСоответствия(СоответствиеПараметров, МассивРазобранныйПараметр, СтрокаФормата);
	КонецЦикла;
	
	Возврат СоответствиеПараметров;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоПредмету(Реквизиты, Предмет)
	
	МетаданныеОбъекта = Предмет.Метаданные();
	ПараметрыОснования = ОпределитьРеквизитыДляЗапросаПоМетаданным(Реквизиты, МетаданныеОбъекта);
	
	СписокРеквизитов = Сред(СписокПараметров(ПараметрыОснования), 3);
	Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
		
		ЗначенияРеквизитов = Новый Соответствие;
		Для Каждого ЗначениеРеквизита Из ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, СписокРеквизитов, Истина) Цикл
			ЗначенияРеквизитов.Вставить(ЗначениеРеквизита.Ключ, ЗначениеРеквизита.Значение);
		КонецЦикла;
		УстановитьПараметрыИзЗапроса(Реквизиты, ЗначенияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ОпределитьРеквизитыДляЗапросаПоМетаданным(Знач ПараметрыТекстаСообщения, МетаданныеОбъекта)
	
	ПараметрыОснования = СкопироватьСоответствие(ПараметрыТекстаСообщения);
	ОбработатьОпределитьРеквизитыДляЗапросаПоМетаданным(ПараметрыОснования, МетаданныеОбъекта);
	Возврат ПараметрыОснования;
	
КонецФункции

Процедура ОбработатьОпределитьРеквизитыДляЗапросаПоМетаданным(ПараметрыОснования, МетаданныеОбъекта)
	
	Для каждого ПараметрОснования Из ПараметрыОснования Цикл
		Позиция = СтрНайти(ПараметрОснования.Ключ, "{");
		Если Позиция > 0 Тогда
			ИмяПараметра = Лев(ПараметрОснования.Ключ, Позиция - 1);
		Иначе
			ИмяПараметра = ПараметрОснования.Ключ;
		КонецЕсли;
		Если ТипЗнч(ПараметрОснования.Значение) = Тип("Соответствие") Тогда
			МетаданныеОбъектаПоКлючу = МетаданныеОбъекта.Реквизиты.Найти(ИмяПараметра);
			Если МетаданныеОбъектаПоКлючу <> Неопределено Тогда
				Для каждого Тип Из МетаданныеОбъектаПоКлючу.Тип.Типы() Цикл
					ОбработатьОпределитьРеквизитыДляЗапросаПоМетаданным(ПараметрОснования.Значение, Метаданные.НайтиПоТипу(Тип));
				КонецЦикла;
			Иначе
				ПараметрыОснования.Удалить(ПараметрОснования.Ключ);
			КонецЕсли;
		ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти(ИмяПараметра) = Неопределено Тогда
			РеквизитНеНайден = Истина;
				Для каждого СтандартныеРеквизиты Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				Если СтрСравнить(СтандартныеРеквизиты.Имя, ИмяПараметра) = 0 Тогда
					РеквизитНеНайден = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если РеквизитНеНайден Тогда
				ПараметрыОснования.Удалить(ПараметрОснования.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыИзЗапроса(Параметры, Результат, Знач Префикс = "")
	
	Для каждого ЗначениеПараметра Из Параметры Цикл
		Если ТипЗнч(Параметры[ЗначениеПараметра.Ключ]) = Тип("Соответствие") Тогда
			УстановитьПараметрыИзЗапроса(Параметры[ЗначениеПараметра.Ключ], Результат, Префикс + ЗначениеПараметра.Ключ);
		Иначе
			Если ПустаяСтрока(ЗначениеПараметра.Значение) Тогда
				ПозицияФормата = СтрНайти(ЗначениеПараметра.Ключ, "{");
				Если ПозицияФормата > 0 Тогда
					ИмяПараметра = Лев(ЗначениеПараметра.Ключ, ПозицияФормата - 1);
					СтрокаФормата = Сред(ЗначениеПараметра.Ключ, ПозицияФормата + 1, 
									СтрДлина(ЗначениеПараметра.Ключ) - СтрДлина(ИмяПараметра) - 2);
					Значение = Результат.Получить(Префикс + ИмяПараметра);
					Если СтрНачинаетсяС(СтрокаФормата , "Д") Тогда
						Параметры[ЗначениеПараметра.Ключ] = Формат(ПреобразоватьСтрокиКТипу(Значение, "Дата"), СтрокаФормата);
					ИначеЕсли СтрНачинаетсяС(СтрокаФормата , "Ч") Тогда
						Параметры[ЗначениеПараметра.Ключ] = Формат(ПреобразоватьСтрокиКТипу(Значение, "Число"), СтрокаФормата);
					ИначеЕсли СтрНачинаетсяС(СтрокаФормата , "Б") Тогда
						Параметры[ЗначениеПараметра.Ключ] = Формат(ПреобразоватьСтрокиКТипу(Значение, "Булево"), СтрокаФормата);
					Иначе
						Параметры[ЗначениеПараметра.Ключ] = Формат(Результат.Получить(Префикс + ИмяПараметра), СтрокаФормата);
					КонецЕсли;
				Иначе
					Параметры[ЗначениеПараметра.Ключ] = ?(Результат[Префикс + ЗначениеПараметра.Ключ] <> Неопределено, 
						Результат[Префикс + ЗначениеПараметра.Ключ], "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  

Функция СписокПараметров(ПараметрыТекстаСообщения, Префикс = "")
	
	СписокРеквизитов = "";
	Реквизиты = Новый Соответствие;
	Для каждого Реквизит Из ПараметрыТекстаСообщения Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Соответствие") Тогда
			СписокРеквизитов = СписокРеквизитов + СписокПараметров(Реквизит.Значение, Реквизит.Ключ + ".");
		Иначе
			Если ПустаяСтрока(Реквизит.Значение) Тогда
				
				ОписаниеРеквизита = ИмяПараметраБезСтрокиФормата(Реквизит.Ключ);
				Если Реквизиты[ОписаниеРеквизита.Имя] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Реквизиты.Вставить(ОписаниеРеквизита.Имя, Истина);
				
				СписокРеквизитов = СписокРеквизитов + ", " + Префикс + ОписаниеРеквизита.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура УстановитьЭлементСоответствия(СоответствиеПараметров, Знач МассивРазобранныйПараметр, СтрокаФормата)
	ЭлементСоответствия = СоответствиеПараметров.Получить(МассивРазобранныйПараметр[0]);
	Если ЭлементСоответствия = Неопределено Тогда
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			ВнутреннийЭлементСоответствия = Новый Соответствие;
			СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0], ВнутреннийЭлементСоответствия);
			МассивРазобранныйПараметр.Удалить(0);
			УстановитьЭлементСоответствия(ВнутреннийЭлементСоответствия, МассивРазобранныйПараметр, СтрокаФормата);
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0] + СтрокаФормата] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0] + СтрокаФормата, "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			МассивРазобранныйПараметр.Удалить(0);
			УстановитьЭлементСоответствия(ЭлементСоответствия, МассивРазобранныйПараметр, СтрокаФормата);
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0] + СтрокаФормата] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0] + СтрокаФормата, "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СкопироватьСоответствие(Источник)
	
	Получатель = Новый Соответствие;
	
	Для каждого Элемент Из Источник Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Соответствие") Тогда
			Получатель[Элемент.Ключ] = СкопироватьСоответствие(Элемент.Значение);
		Иначе
			Получатель[Элемент.Ключ] = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Получатель;
	
КонецФункции

Функция ИмяПараметраБезСтрокиФормата(Знач ПараметрШаблонаИзТекста) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Имя",   "");
	Результат.Вставить("Формат", "");
	
	ПозицияФорматТекст = СтрНайти(ПараметрШаблонаИзТекста, "{", НаправлениеПоиска.СКонца);
	Если ПозицияФорматТекст > 0 Тогда
		Результат.Имя = Лев(ПараметрШаблонаИзТекста, ПозицияФорматТекст - 1);
		Результат.Формат = Сред(ПараметрШаблонаИзТекста, ПозицияФорматТекст + 1, 
			СтрДлина(ПараметрШаблонаИзТекста) - ПозицияФорматТекст - 1);
	Иначе
		Результат.Имя = ПараметрШаблонаИзТекста;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьСтрокиКТипу(Значение, Тип)
	ОписаниеТипа = Новый ОписаниеТипов(Тип);
	Возврат ОписаниеТипа.ПривестиЗначение(Значение);
КонецФункции

#КонецОбласти

#КонецЕсли